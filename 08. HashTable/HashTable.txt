<해시 함수>
해시 함수는 데이터의 효율적인 관리를 위해 각각 임의의 길이를 가진 데이터들을 고정된 길이를 가진
데이터로 매핑하는 단방향 함수이다. 단방향 함수이기 때문에 결과값을 역으로 입력값으로 변환할 수 없다.

이때 매핑(해시 함수에 문자열 입력값을 넣어 특정한 값으로 추출)하는 과정을 해싱(Hashing)이라고 하며
매핑하기 전의 데이터를 키(Key), 매핑 후의 데이터를 해시 값(Hash Value / Value)라고 한다.

해시 함수는 데이터들이 종속/상하 관계일때는 사용되지 않는 데이터 구조이다. 공간을 포기하고 속도를 우선했기
때문에 공간효율이 좋지 않다. 데이터가 없어도 미리 저장 공간을 만들어 두어야하며 공간이 없으면 오류가 나타난다.
데이터가 많아질수록 충돌을 피할 수 없게 된다. 충돌이 생겨도 한개의 함수에 의지해야하는 문제가 있다.

<해시 함수의 효율>
1. 해시 함수의 처리 속도가 빠를수록 효율이 좋다.
2. 해시 함수 결과의 밀집도가 낮을수록 효율이 좋다.
3. 해시 테이블의 크기가 클수록 효율적이다.

<해시 함수의 인덱스 값 설정 방법>
해시 함수는 입력에 대한 해시 함수의 결과가 항상 동일한 값이어야 하는 조건이 있다.
=> 그렇기 때문에 고유한 인덱스 값을 설정하는 것이 매우 중요하다.

- 설정 방법의 예
1. 나눗셈법(Division Method) : 나눗셈을 이용하는 방법. index = input % Capacity
2. 자릿수접기(Digit Folding) : 각 Key의 문자열을 ASCII 코드로 바꾸고 그 값을 합한 데이터를 주소로 사용한다.
3. 곱하기방법(Multiplication Method) : 나눗셈법은 해시 테이블 크기보다 큰 수를 해시 테이블 크기 안으로 들어오게
수축시킨다면, 곱하기 방법은 반대로 입력값을 0과 1사이의 소수로 대응시킨 후 해시 테이블 크기 m을 곱하여 0~m-1 사이로
팽창시킨다. h(K) = kAmod1 * m ( 0<A<1 )

<해시 함수의 목적>
1. 자료구조(해시 테이블) : 해시 테이블은 데이터의 해시 값을 테이블 내 주소로 이용하는 탐색 알고리즘이다.
키 값을 해시함수로 해싱하여 해시테이블의 특정 위치로 직접 액세스하도록 만든 방식이며 공간을 포기하고
속도를 우선한 자료구조이다. O(1)의 시간 복잡도로 접근하는데 사용된다.
=> 특정 키를 해싱해서 나오는 문자열에 값들을 저장해놓음으로써 키에 따라 바로 원하는 값을 찾을 수 있다.

2. 암호화 : 입력값을 해싱했을 때 출력값은 일정하다는 것을 근거로 사용자의 비밀번호나 중요 정보의
내용을 해싱하여 복호화 할 수 없게 만드는 것이다. 이것 자체가 암호화에 매우 유용하며 이런 특성을 활용한
대표적인 암호화 알고리즘으로 SHA(Secur Hash Algorithm)이 있다.

3. 프로그래밍 언어에서 제공되는 해시 함수
- Java : Hash Map
- JavaScript : 객체 / Map
- Python : 사전(Dictionary)

<해시테이블 주의점 - 충돌(Collision)>
해시테이블의 조건 : 서로 다른 입력 값에 대해 동일한 해시 테이블 주소를 반환하면 안됨
이 조건을 위반할때 충돌이 났다고 한다. 해시 함수가 아무리 완벽해도 충돌을 끝까지 피할 순 없다.

<해시 테이블 충돌 극복방법>
해시 테이블 충돌의 대표적인 극복방법 2가지
[체이닝]
해시 충돌이 발생하면 같은 주소로 해싱된 원소를 모두 하나의 연결리스트에 붙여 관리하는 기법이다.
체이닝에서의 삽입은 효율성을 위해 연결리스트의 맨 앞에 삽입을 한다. 맨 뒤에 삽입할 경우 삽입시마다
연결리스트를 따라 맨 끝으로 이동해야하므로 낭비가 된다.
장점 : 해시 함수의 의존도가 낮아진다. 상대적으로 메모리 사용량이 낮고 공간을 확보할 필요가 없어진다.
단점 : 데이터들이 일부 해시 테이블 위치에 몰려 클러스터 현상으로 인해 검색 속도가 느려질 수 있다.
		+ LinkedList 공간이 따로 필요한 단점 때문에 C#에서는 체이닝을 선호하지 않는다.

[개방 주소법]
개방 주소법은 말 그대로 해당 주소를 개방한다는 의미이다. 체이닝처럼 연결 리스트를 만드는 것이 아니라 그냥
비어있는 곳으로 찾아가 데이터를 넣는 방법이다. 물론 마구잡이로 넣는게 아니라 일정한 규칙에 따라 넣는 방법이다.

[개방 주소법의 방법]
- 선형탐색(Linear Probing) : +n개를 건너뛰고 비어있는 해시에 데이터를 저장 
특정 영역에 원소가 몰릴 때 치명적으로 성능이 떨어지는 문제가 있다. 이렇게 되면 평균 검색 시간과 삽입 시간이 늘어난다.

- 이차원조사(Quadratic Probing) : 충돌 후 해시를 제곱하여 해당 해시에 저장
선형탐색과 달리 보폭을 이차함수에 의해 넓혀가면서 볼 수 있다. 그러나 여러 개의 원소가 동일한 초기 해시 함수
값을 갖게 되면 모두 같은 순서로 조사를 할 수 밖에 없어 비효율적이 된다.